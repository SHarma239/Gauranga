{
  "contractName": "BicycleBuy",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycles",
      "outputs": [
        {
          "name": "Model",
          "type": "string"
        },
        {
          "name": "Color",
          "type": "string"
        },
        {
          "name": "Owner",
          "type": "address"
        },
        {
          "name": "upvoteCount",
          "type": "uint32"
        },
        {
          "name": "downvoteCount",
          "type": "uint32"
        },
        {
          "name": "boughtAtTime",
          "type": "uint16"
        },
        {
          "name": "price",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "buyer",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x20b6f13d"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x365b98b2"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        },
        {
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "putForSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x3cd76be2"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "soldBicycles",
      "outputs": [
        {
          "name": "Model",
          "type": "string"
        },
        {
          "name": "Color",
          "type": "string"
        },
        {
          "name": "Owner",
          "type": "address"
        },
        {
          "name": "upvoteCount",
          "type": "uint32"
        },
        {
          "name": "downvoteCount",
          "type": "uint32"
        },
        {
          "name": "boughtAtTime",
          "type": "uint16"
        },
        {
          "name": "price",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "buyer",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x3e2b3060"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x715018a6"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerBicycleCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x86eb2087"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8f32d59b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "upvoteBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x96a588be"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "displayBicyclesForSale",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xa4b23b21"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycleToOwner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xb9ca9f38"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "downvoteBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xc10be00b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_Model",
          "type": "string"
        },
        {
          "name": "_Color",
          "type": "string"
        }
      ],
      "name": "registerBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xc7a94931"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycleForSale",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xca6d8ee0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xf2fde38b"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "Model",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "Color",
          "type": "string"
        }
      ],
      "name": "NewBicycle",
      "type": "event",
      "signature": "0xaa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event",
      "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "buyBicycle",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0xbc566225"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "delivered",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0x4b5e4108"
    }
  ],
  "bytecode": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3612243806100cf6000396000f3fe6080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806320b6f13d146100f6578063365b98b2146102cd5780633cd76be2146103485780633e2b30601461038d5780634b5e410814610564578063715018a61461059257806386eb2087146105a95780638da5cb5b1461060e5780638f32d59b1461066557806396a588be14610694578063a4b23b21146106cf578063b9ca9f381461073b578063bc566225146107b6578063c10be00b146107e4578063c7a949311461081f578063ca6d8ee01461097e578063f2fde38b146109cd575b600080fd5b34801561010257600080fd5b5061012f6004803603602081101561011957600080fd5b8101908080359060200190929190505050610a1e565b6040518080602001806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018761ffff1661ffff1681526020018681526020018560038111156101b157fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528c818151815260200191508051906020019080838360005b83811015610223578082015181840152602081019050610208565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b5083810382528b818151815260200191508051906020019080838360005b8381101561028957808201518184015260208101905061026e565b50505050905090810190601f1680156102b65780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b3480156102d957600080fd5b50610306600480360360208110156102f057600080fd5b8101908080359060200190929190505050610c26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035457600080fd5b5061038b6004803603604081101561036b57600080fd5b810190808035906020019092919080359060200190929190505050610c64565b005b34801561039957600080fd5b506103c6600480360360208110156103b057600080fd5b8101908080359060200190929190505050610dbb565b6040518080602001806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018761ffff1661ffff16815260200186815260200185600381111561044857fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528c818151815260200191508051906020019080838360005b838110156104ba57808201518184015260208101905061049f565b50505050905090810190601f1680156104e75780820380516001836020036101000a031916815260200191505b5083810382528b818151815260200191508051906020019080838360005b83811015610520578082015181840152602081019050610505565b50505050905090810190601f16801561054d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b6105906004803603602081101561057a57600080fd5b8101908080359060200190929190505050610fc3565b005b34801561059e57600080fd5b506105a7611182565b005b3480156105b557600080fd5b506105f8600480360360208110156105cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561061a57600080fd5b506106236112d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561067157600080fd5b5061067a6112fe565b604051808215151515815260200191505060405180910390f35b3480156106a057600080fd5b506106cd600480360360208110156106b757600080fd5b8101908080359060200190929190505050611355565b005b3480156106db57600080fd5b506106e46115cf565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561072757808201518184015260208101905061070c565b505050509050019250505060405180910390f35b34801561074757600080fd5b506107746004803603602081101561075e57600080fd5b8101908080359060200190929190505050611627565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107e2600480360360208110156107cc57600080fd5b810190808035906020019092919050505061165a565b005b3480156107f057600080fd5b5061081d6004803603602081101561080757600080fd5b81019080803590602001909291905050506118f5565b005b34801561082b57600080fd5b5061097c6004803603604081101561084257600080fd5b810190808035906020019064010000000081111561085f57600080fd5b82018360208201111561087157600080fd5b8035906020019184600183028401116401000000008311171561089357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108f657600080fd5b82018360208201111561090857600080fd5b8035906020019184600183028401116401000000008311171561092a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b6f565b005b34801561098a57600080fd5b506109b7600480360360208110156109a157600080fd5b8101908080359060200190929190505050611b7d565b6040518082815260200191505060405180910390f35b3480156109d957600080fd5b50610a1c600480360360208110156109f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ba0565b005b600181815481101515610a2d57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad95780601f10610aae57610100808354040283529160200191610ad9565b820191906000526020600020905b815481529060010190602001808311610abc57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b775780601f10610b4c57610100808354040283529160200191610b77565b820191906000526020600020905b815481529060010190602001808311610b5a57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600481815481101515610c3557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f74206f776e6572206f662062696379636c6521000000000000000000000081525060200191505060405180910390fd5b6000600183815481101515610d4b57fe5b9060005260206000209060050201905060018160040160006101000a81548160ff02191690836003811115610d7c57fe5b02179055508181600301819055506006839080600181540180825580915050906001820390600052602060002001600090919290919091505550505050565b600781815481101515610dca57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e765780601f10610e4b57610100808354040283529160200191610e76565b820191906000526020600020905b815481529060010190602001808311610e5957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f145780601f10610ee957610100808354040283529160200191610f14565b820191906000526020600020905b815481529060010190602001808311610ef757829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600181815481101515610fd257fe5b906000526020600020906005020160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206275796572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60006001828154811015156110b757fe5b9060005260206000209060050201905060038160040160006101000a81548160ff021916908360038111156110e857fe5b021790555060008160030181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61118a6112fe565b15156111fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60036020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561141b5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156113f857fe5b9060005260206000200154141561140e5761141b565b8080600101915050611361565b50600081141515611494576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b600060018481548110151561157c57fe5b9060005260206000209060050201905080600201601481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561161d57602002820191906000526020600020905b815481526020019060010190808311611609575b5050505050905090565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600381111561166757fe5b60018281548110151561167657fe5b906000526020600020906005020160040160009054906101000a900460ff1660038111156116a057fe5b141515611715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536f7272792c206e6f7420617661696c61626c6520666f722073616c6521000081525060200191505060405180910390fd5b60018181548110151561172457fe5b90600052602060002090600502016003015434101515156117ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742066756e64207472616e7366657221000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6001838154811015156117d657fe5b90600052602060002090600502016003015434039081150290604051600060405180830381858888f19350505050158015611815573d6000803e3d6000fd5b503360018281548110151561182657fe5b906000526020600020906005020160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260018281548110151561188657fe5b906000526020600020906005020160040160006101000a81548160ff021916908360038111156118b257fe5b0217905550426001828154811015156118c757fe5b9060005260206000209060050201600201601c6101000a81548161ffff021916908361ffff16021790555050565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156119bb5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561199857fe5b906000526020600020015414156119ae576119bb565b8080600101915050611901565b50600081141515611a34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611b0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b6000600184815481101515611b1c57fe5b9060005260206000209060050201905080600201601881819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b611b798282611c28565b5050565b600681815481101515611b8c57fe5b906000526020600020016000915090505481565b611ba86112fe565b1515611c1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611c258161200f565b50565b6000600180610120604051908101604052808681526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600061ffff1681526020016000815260200160006003811115611c9b57fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000019080519060200190611d02929190612172565b506020820151816001019080519060200190611d1f929190612172565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600201601c6101000a81548161ffff021916908361ffff16021790555060c0820151816003015560e08201518160040160006101000a81548160ff02191690836003811115611e0657fe5b02179055506101008201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050039050336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055507faa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557818484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f67578082015181840152602081019050611f4c565b50505050905090810190601f168015611f945780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611fcd578082015181840152602081019050611fb2565b50505050905090810190601f168015611ffa5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6e65774f776e6572203d3d20616464726573732830290000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121b357805160ff19168380011785556121e1565b828001600101855582156121e1579182015b828111156121e05782518255916020019190600101906121c5565b5b5090506121ee91906121f2565b5090565b61221491905b808211156122105760008160009055506001016121f8565b5090565b9056fea165627a7a7230582061aad85b7880b93f7eca9c5418b732f78f1d7519ef7d6e4c6ef42d0e1ec6880c0029",
  "deployedBytecode": "0x6080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806320b6f13d146100f6578063365b98b2146102cd5780633cd76be2146103485780633e2b30601461038d5780634b5e410814610564578063715018a61461059257806386eb2087146105a95780638da5cb5b1461060e5780638f32d59b1461066557806396a588be14610694578063a4b23b21146106cf578063b9ca9f381461073b578063bc566225146107b6578063c10be00b146107e4578063c7a949311461081f578063ca6d8ee01461097e578063f2fde38b146109cd575b600080fd5b34801561010257600080fd5b5061012f6004803603602081101561011957600080fd5b8101908080359060200190929190505050610a1e565b6040518080602001806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018761ffff1661ffff1681526020018681526020018560038111156101b157fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528c818151815260200191508051906020019080838360005b83811015610223578082015181840152602081019050610208565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b5083810382528b818151815260200191508051906020019080838360005b8381101561028957808201518184015260208101905061026e565b50505050905090810190601f1680156102b65780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b3480156102d957600080fd5b50610306600480360360208110156102f057600080fd5b8101908080359060200190929190505050610c26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035457600080fd5b5061038b6004803603604081101561036b57600080fd5b810190808035906020019092919080359060200190929190505050610c64565b005b34801561039957600080fd5b506103c6600480360360208110156103b057600080fd5b8101908080359060200190929190505050610dbb565b6040518080602001806020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018761ffff1661ffff16815260200186815260200185600381111561044857fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528c818151815260200191508051906020019080838360005b838110156104ba57808201518184015260208101905061049f565b50505050905090810190601f1680156104e75780820380516001836020036101000a031916815260200191505b5083810382528b818151815260200191508051906020019080838360005b83811015610520578082015181840152602081019050610505565b50505050905090810190601f16801561054d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b6105906004803603602081101561057a57600080fd5b8101908080359060200190929190505050610fc3565b005b34801561059e57600080fd5b506105a7611182565b005b3480156105b557600080fd5b506105f8600480360360208110156105cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bd565b6040518082815260200191505060405180910390f35b34801561061a57600080fd5b506106236112d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561067157600080fd5b5061067a6112fe565b604051808215151515815260200191505060405180910390f35b3480156106a057600080fd5b506106cd600480360360208110156106b757600080fd5b8101908080359060200190929190505050611355565b005b3480156106db57600080fd5b506106e46115cf565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561072757808201518184015260208101905061070c565b505050509050019250505060405180910390f35b34801561074757600080fd5b506107746004803603602081101561075e57600080fd5b8101908080359060200190929190505050611627565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107e2600480360360208110156107cc57600080fd5b810190808035906020019092919050505061165a565b005b3480156107f057600080fd5b5061081d6004803603602081101561080757600080fd5b81019080803590602001909291905050506118f5565b005b34801561082b57600080fd5b5061097c6004803603604081101561084257600080fd5b810190808035906020019064010000000081111561085f57600080fd5b82018360208201111561087157600080fd5b8035906020019184600183028401116401000000008311171561089357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108f657600080fd5b82018360208201111561090857600080fd5b8035906020019184600183028401116401000000008311171561092a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b6f565b005b34801561098a57600080fd5b506109b7600480360360208110156109a157600080fd5b8101908080359060200190929190505050611b7d565b6040518082815260200191505060405180910390f35b3480156109d957600080fd5b50610a1c600480360360208110156109f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ba0565b005b600181815481101515610a2d57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad95780601f10610aae57610100808354040283529160200191610ad9565b820191906000526020600020905b815481529060010190602001808311610abc57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b775780601f10610b4c57610100808354040283529160200191610b77565b820191906000526020600020905b815481529060010190602001808311610b5a57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600481815481101515610c3557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f74206f776e6572206f662062696379636c6521000000000000000000000081525060200191505060405180910390fd5b6000600183815481101515610d4b57fe5b9060005260206000209060050201905060018160040160006101000a81548160ff02191690836003811115610d7c57fe5b02179055508181600301819055506006839080600181540180825580915050906001820390600052602060002001600090919290919091505550505050565b600781815481101515610dca57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e765780601f10610e4b57610100808354040283529160200191610e76565b820191906000526020600020905b815481529060010190602001808311610e5957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f145780601f10610ee957610100808354040283529160200191610f14565b820191906000526020600020905b815481529060010190602001808311610ef757829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b600181815481101515610fd257fe5b906000526020600020906005020160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206275796572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60006001828154811015156110b757fe5b9060005260206000209060050201905060038160040160006101000a81548160ff021916908360038111156110e857fe5b021790555060008160030181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61118a6112fe565b15156111fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60036020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561141b5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156113f857fe5b9060005260206000200154141561140e5761141b565b8080600101915050611361565b50600081141515611494576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b600060018481548110151561157c57fe5b9060005260206000209060050201905080600201601481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561161d57602002820191906000526020600020905b815481526020019060010190808311611609575b5050505050905090565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600381111561166757fe5b60018281548110151561167657fe5b906000526020600020906005020160040160009054906101000a900460ff1660038111156116a057fe5b141515611715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536f7272792c206e6f7420617661696c61626c6520666f722073616c6521000081525060200191505060405180910390fd5b60018181548110151561172457fe5b90600052602060002090600502016003015434101515156117ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742066756e64207472616e7366657221000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6001838154811015156117d657fe5b90600052602060002090600502016003015434039081150290604051600060405180830381858888f19350505050158015611815573d6000803e3d6000fd5b503360018281548110151561182657fe5b906000526020600020906005020160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260018281548110151561188657fe5b906000526020600020906005020160040160006101000a81548160ff021916908360038111156118b257fe5b0217905550426001828154811015156118c757fe5b9060005260206000209060050201600201601c6101000a81548161ffff021916908361ffff16021790555050565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156119bb5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561199857fe5b906000526020600020015414156119ae576119bb565b8080600101915050611901565b50600081141515611a34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611b0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b6000600184815481101515611b1c57fe5b9060005260206000209060050201905080600201601881819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b611b798282611c28565b5050565b600681815481101515611b8c57fe5b906000526020600020016000915090505481565b611ba86112fe565b1515611c1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611c258161200f565b50565b6000600180610120604051908101604052808681526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600061ffff1681526020016000815260200160006003811115611c9b57fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000019080519060200190611d02929190612172565b506020820151816001019080519060200190611d1f929190612172565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600201601c6101000a81548161ffff021916908361ffff16021790555060c0820151816003015560e08201518160040160006101000a81548160ff02191690836003811115611e0657fe5b02179055506101008201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050039050336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055507faa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557818484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f67578082015181840152602081019050611f4c565b50505050905090810190601f168015611f945780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611fcd578082015181840152602081019050611fb2565b50505050905090810190601f168015611ffa5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6e65774f776e6572203d3d20616464726573732830290000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121b357805160ff19168380011785556121e1565b828001600101855582156121e1579182015b828111156121e05782518255916020019190600101906121c5565b5b5090506121ee91906121f2565b5090565b61221491905b808211156122105760008160009055506001016121f8565b5090565b9056fea165627a7a7230582061aad85b7880b93f7eca9c5418b732f78f1d7519ef7d6e4c6ef42d0e1ec6880c0029",
  "sourceMap": "77:1087:0:-;;;522:10:7;513:6;;:19;;;;;;;;;;;;;;;;;;580:6;;;;;;;;;;;547:40;;576:1;547:40;;;;;;;;;;;;77:1087:0;;;;;;",
  "deployedSourceMap": "77:1087:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;467:25:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;467:25:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;467:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;467:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;467:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1079:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1079:22:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1079:22:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;206:407:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;206:407:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;206:407:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;115:29:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;115:29:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;115:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;115:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;115:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;671:486;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;671:486:0;;;;;;;;;;;;;;;;;;;;1316:137:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1316:137:7;;;;;;551:49:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;551:49:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;551:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;649:76:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;649:76:7;;;;;;;;;;;;;;;;;;;;;;;;;;;966:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;966:89:7;;;;;;;;;;;;;;;;;;;;;;;;;;;549:259:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;549:259:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;549:259:6;;;;;;;;;;;;;;;;;;;;619:109:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;619:109:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;619:109:5;;;;;;;;;;;;;;;;;499:46:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;499:46:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;499:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;188:472:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;188:472:0;;;;;;;;;;;;;;;;;;;;814:276:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;814:276:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;814:276:6;;;;;;;;;;;;;;;;;;;;947:125:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;947:125:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;947:125:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;947:125:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;947:125:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;947:125:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;947:125:2;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;947:125:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;947:125:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;947:125:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;947:125:2;;;;;;;;;;;;;;;;;;171:28:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;171:28:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;171:28:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:107:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1613:107:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1613:107:7;;;;;;;;;;;;;;;;;;;;;;467:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1079:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;206:407:5:-;295:14;:26;310:10;295:26;;;;;;;;;;;;;;;;;;;;;281:40;;:10;:40;;;273:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;357:25;385:8;394:10;385:20;;;;;;;;;;;;;;;;;;;;357:48;;433:13;415:9;:15;;;:31;;;;;;;;;;;;;;;;;;;;;;;;474:6;456:9;:15;;:24;;;;490:14;510:10;490:31;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;490:31:5;;;;;;;;;;;;;;;;;;;;;;206:407;;;:::o;115:29:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;671:486::-;780:8;789:10;780:20;;;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;766:40;;:10;:40;;;758:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:29;971:8;980:10;971:20;;;;;;;;;;;;;;;;;;;;939:52;;1023:10;1001:13;:19;;;:32;;;;;;;;;;;;;;;;;;;;;;;;1065:1;1043:13;:19;;:23;;;;1098:10;1076:13;:19;;;:32;;;;;;;;;;;;;;;;;;1148:1;1118:13;:19;;;:32;;;;;;;;;;;;;;;;;;671:486;;:::o;1316:137:7:-;844:9;:7;:9::i;:::-;836:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1414:1;1377:40;;1398:6;;;;;;;;;;;1377:40;;;;;;;;;;;;1444:1;1427:6;;:19;;;;;;;;;;;;;;;;;;1316:137::o;551:49:2:-;;;;;;;;;;;;;;;;;:::o;649:76:7:-;686:7;712:6;;;;;;;;;;;705:13;;649:76;:::o;966:89::-;1005:4;1042:6;;;;;;;;;;;1028:20;;:10;:20;;;1021:27;;966:89;:::o;549:259:6:-;608:10;243:9;255:1;243:13;;270:6;279:1;270:10;;266:203;286:17;:29;304:10;286:29;;;;;;;;;;;;;;;:36;;;;282:1;:40;266:203;;;382:10;346:17;:29;364:10;346:29;;;;;;;;;;;;;;;376:1;346:32;;;;;;;;;;;;;;;;;;:46;343:116;;;439:5;;343:116;324:3;;;;;;;266:203;;;;494:1;486:4;:9;478:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;652:14;:26;667:10;652:26;;;;;;;;;;;;;;;;;;;;;638:40;;:10;:40;;;;630:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;716:27;746:8;755:10;746:20;;;;;;;;;;;;;;;;;;;;716:50;;776:11;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:1;549:259;;;:::o;619:109:5:-;675:13;707:14;700:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;619:109;:::o;499:46:2:-;;;;;;;;;;;;;;;;;;;;;;:::o;188:472:0:-;290:13;260:43;;;;;;;;:8;269:10;260:20;;;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:43;;;;;;;;;252:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:8;378:10;369:20;;;;;;;;;;;;;;;;;;;;:26;;;356:9;:39;;348:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;437:10;:19;;:59;469:8;478:10;469:20;;;;;;;;;;;;;;;;;;;;:26;;;457:9;:38;437:59;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;437:59:0;535:10;506:8;515:10;506:20;;;;;;;;;;;;;;;;;;;;:26;;;:39;;;;;;;;;;;;;;;;;;584:10;555:8;564:10;555:20;;;;;;;;;;;;;;;;;;;;:26;;;:39;;;;;;;;;;;;;;;;;;;;;;;;647:3;604:8;613:10;604:20;;;;;;;;;;;;;;;;;;;;:33;;;:47;;;;;;;;;;;;;;;;;;188:472;:::o;814:276:6:-;875:10;243:9;255:1;243:13;;270:6;279:1;270:10;;266:203;286:17;:29;304:10;286:29;;;;;;;;;;;;;;;:36;;;;282:1;:40;266:203;;;382:10;346:17;:29;364:10;346:29;;;;;;;;;;;;;;;376:1;346:32;;;;;;;;;;;;;;;;;;:46;343:116;;;439:5;;343:116;324:3;;;;;;;266:203;;;;494:1;486:4;:9;478:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;932:14;:26;947:10;932:26;;;;;;;;;;;;;;;;;;;;;918:40;;:10;:40;;;;910:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;996:27;1026:8;1035:10;1026:20;;;;;;;;;;;;;;;;;;;;996:50;;1056:11;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:1;814:276;;;:::o;947:125:2:-;1033:32;1050:6;1058;1033:16;:32::i;:::-;947:125;;:::o;171:28:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1613:107:7:-;844:9;:7;:9::i;:::-;836:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1685:28;1704:8;1685:18;:28::i;:::-;1613:107;:::o;612:329:2:-;700:7;805:1;710:8;724:77;;;;;;;;;732:6;724:77;;;;740:6;724:77;;;;748:10;724:77;;;;;;760:1;724:77;;;;;;763:1;724:77;;;;;;766:1;724:77;;;;;;769:1;724:77;;;;772:16;724:77;;;;;;;;;;;;798:1;724:77;;;;;710:92;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;710:92:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:96;700:106;;838:10;817:14;:18;832:2;817:18;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;858:17;:29;876:10;858:29;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;904:30;915:2;919:6;927;904:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;904:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;904:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;612:329;;;:::o;1853:209:7:-;1946:1;1926:22;;:8;:22;;;;1918:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2019:8;1990:38;;2011:6;;;;;;;;;;;1990:38;;;;;;;;;;;;2047:8;2038:6;;:17;;;;;;;;;;;;;;;;;;1853:209;:::o;77:1087:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./biketrade01.sol\";\nimport \"./Escrow.sol\";\n\ncontract BicycleBuy is ForSale {\n\n    Bicycle[] public soldBicycles;\n    //Escrow public transactionBuy()\n\n    function buyBicycle(uint _bicycleId) external payable {\n        require(bicycles[_bicycleId].state == State.FORSALE, \"Sorry, not available for sale!\");\n        require(msg.value >= bicycles[_bicycleId].price, \"Insufficient fund transfer!\");\n        msg.sender.transfer(msg.value - bicycles[_bicycleId].price);\n        bicycles[_bicycleId].buyer = msg.sender;\n        bicycles[_bicycleId].state = State.HOLD;\n        bicycles[_bicycleId].boughtAtTime = uint16(now);  \n    }\n\n    \n    function delivered(uint _bicycleId) external payable {   //incomplete function\n        require(msg.sender == bicycles[_bicycleId].buyer, \"Not buyer!\");\n        //address owner = bicycleToOwner[_bicycleId];\n        //owner.transfer(bicycles[_bicycleId].price);\n        Bicycle storage targetBicycle = bicycles[_bicycleId];\n        targetBicycle.state = State.SOLD;\n        targetBicycle.price = 0;\n        targetBicycle.Owner = msg.sender;\n        targetBicycle.buyer = address(0);\n    }\n    \n}",
  "sourcePath": "/home/anshu1/Desktop/Gauranga/contracts/BicycleBuy.sol",
  "ast": {
    "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/BicycleBuy.sol",
    "exportedSymbols": {
      "BicycleBuy": [
        127
      ]
    },
    "id": 128,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/biketrade01.sol",
        "file": "./biketrade01.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 128,
        "sourceUnit": 514,
        "src": "25:27:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/Escrow.sol",
        "file": "./Escrow.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 128,
        "sourceUnit": 212,
        "src": "53:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "ForSale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 513,
              "src": "100:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ForSale_$513",
                "typeString": "contract ForSale"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "100:7:0"
          }
        ],
        "contractDependencies": [
          328,
          513,
          632,
          743
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 127,
        "linearizedBaseContracts": [
          127,
          513,
          632,
          328,
          743
        ],
        "name": "BicycleBuy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 8,
            "name": "soldBicycles",
            "nodeType": "VariableDeclaration",
            "scope": 127,
            "src": "115:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
              "typeString": "struct BicycleRegister.Bicycle[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 6,
                "name": "Bicycle",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 250,
                "src": "115:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                  "typeString": "struct BicycleRegister.Bicycle"
                }
              },
              "id": 7,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "115:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage_ptr",
                "typeString": "struct BicycleRegister.Bicycle[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "242:418:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$229",
                          "typeString": "enum BicycleRegister.State"
                        },
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 14,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "260:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 16,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 15,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "269:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "260:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 17,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "state",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 247,
                          "src": "260:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$229",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 18,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 229,
                            "src": "290:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                              "typeString": "type(enum BicycleRegister.State)"
                            }
                          },
                          "id": 19,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FORSALE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "290:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$229",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "src": "260:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "536f7272792c206e6f7420617661696c61626c6520666f722073616c6521",
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "305:32:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        },
                        "value": "Sorry, not available for sale!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        }
                      ],
                      "id": 13,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "252:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "252:86:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "252:86:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 25,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "356:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "356:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 27,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "369:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 29,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 28,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "378:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "369:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 30,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 245,
                          "src": "369:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "356:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "496e73756666696369656e742066756e64207472616e7366657221",
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "397:29:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        },
                        "value": "Insufficient fund transfer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        }
                      ],
                      "id": 24,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "348:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "348:79:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "348:79:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 40,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "457:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 41,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "457:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 42,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "469:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 44,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 43,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "478:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "469:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 45,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 245,
                          "src": "469:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "457:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 35,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 772,
                          "src": "437:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 38,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "437:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 39,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "437:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 47,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "437:59:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48,
                  "nodeType": "ExpressionStatement",
                  "src": "437:59:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "506:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 51,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 50,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "515:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "506:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 52,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "buyer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 249,
                      "src": "506:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "535:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "535:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "506:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "506:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 57,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "555:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 59,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 58,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "564:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "555:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 60,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 247,
                      "src": "555:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 61,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 229,
                        "src": "584:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "HOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "584:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "555:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$229",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 64,
                  "nodeType": "ExpressionStatement",
                  "src": "555:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 65,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "604:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 67,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 66,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "613:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "604:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 68,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "boughtAtTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 243,
                      "src": "604:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 70,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 774,
                          "src": "647:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "640:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint16_$",
                          "typeString": "type(uint16)"
                        },
                        "typeName": "uint16"
                      },
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "640:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "src": "604:47:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "604:47:0"
                }
              ]
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "buyBicycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "208:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "208:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "207:17:0"
            },
            "returnParameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "242:0:0"
            },
            "scope": 127,
            "src": "188:472:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 125,
              "nodeType": "Block",
              "src": "724:433:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 81,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "766:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 82,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "766:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 83,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "780:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 85,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 84,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "789:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "780:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 86,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "buyer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 249,
                          "src": "780:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "766:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e6f7420627579657221",
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "808:12:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_40a6be1ab6b9315b6d1f069fcd6f3fedb9722309bcc4a987d2699b792777da49",
                          "typeString": "literal_string \"Not buyer!\""
                        },
                        "value": "Not buyer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_40a6be1ab6b9315b6d1f069fcd6f3fedb9722309bcc4a987d2699b792777da49",
                          "typeString": "literal_string \"Not buyer!\""
                        }
                      ],
                      "id": 80,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "758:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 89,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "758:63:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 90,
                  "nodeType": "ExpressionStatement",
                  "src": "758:63:0"
                },
                {
                  "assignments": [
                    92
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 92,
                      "name": "targetBicycle",
                      "nodeType": "VariableDeclaration",
                      "scope": 125,
                      "src": "939:29:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                        "typeString": "struct BicycleRegister.Bicycle"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 91,
                        "name": "Bicycle",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 250,
                        "src": "939:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 96,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 93,
                      "name": "bicycles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 253,
                      "src": "971:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                        "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                      }
                    },
                    "id": 95,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 94,
                      "name": "_bicycleId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77,
                      "src": "980:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "971:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                      "typeString": "struct BicycleRegister.Bicycle storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "939:52:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 97,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1001:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 99,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 247,
                      "src": "1001:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 229,
                        "src": "1023:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "SOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1023:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "1001:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$229",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1001:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 104,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1043:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 106,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "price",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 245,
                      "src": "1043:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1065:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1043:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1043:23:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 110,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1076:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "Owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 237,
                      "src": "1076:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 113,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "1098:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1098:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1076:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 116,
                  "nodeType": "ExpressionStatement",
                  "src": "1076:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 117,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1118:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 119,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "buyer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 249,
                      "src": "1118:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1148:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1140:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 122,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1140:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1118:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 124,
                  "nodeType": "ExpressionStatement",
                  "src": "1118:32:0"
                }
              ]
            },
            "documentation": null,
            "id": 126,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delivered",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 78,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 126,
                  "src": "690:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "690:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "689:17:0"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "724:0:0"
            },
            "scope": 127,
            "src": "671:486:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 128,
        "src": "77:1087:0"
      }
    ],
    "src": "0:1164:0"
  },
  "legacyAST": {
    "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/BicycleBuy.sol",
    "exportedSymbols": {
      "BicycleBuy": [
        127
      ]
    },
    "id": 128,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/biketrade01.sol",
        "file": "./biketrade01.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 128,
        "sourceUnit": 514,
        "src": "25:27:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/anshu1/Desktop/Gauranga/contracts/Escrow.sol",
        "file": "./Escrow.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 128,
        "sourceUnit": 212,
        "src": "53:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "ForSale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 513,
              "src": "100:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ForSale_$513",
                "typeString": "contract ForSale"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "100:7:0"
          }
        ],
        "contractDependencies": [
          328,
          513,
          632,
          743
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 127,
        "linearizedBaseContracts": [
          127,
          513,
          632,
          328,
          743
        ],
        "name": "BicycleBuy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 8,
            "name": "soldBicycles",
            "nodeType": "VariableDeclaration",
            "scope": 127,
            "src": "115:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
              "typeString": "struct BicycleRegister.Bicycle[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 6,
                "name": "Bicycle",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 250,
                "src": "115:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                  "typeString": "struct BicycleRegister.Bicycle"
                }
              },
              "id": 7,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "115:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage_ptr",
                "typeString": "struct BicycleRegister.Bicycle[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "242:418:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$229",
                          "typeString": "enum BicycleRegister.State"
                        },
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 14,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "260:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 16,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 15,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "269:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "260:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 17,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "state",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 247,
                          "src": "260:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$229",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 18,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 229,
                            "src": "290:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                              "typeString": "type(enum BicycleRegister.State)"
                            }
                          },
                          "id": 19,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FORSALE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "290:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$229",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "src": "260:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "536f7272792c206e6f7420617661696c61626c6520666f722073616c6521",
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "305:32:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        },
                        "value": "Sorry, not available for sale!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        }
                      ],
                      "id": 13,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "252:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "252:86:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "252:86:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 25,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "356:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "356:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 27,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "369:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 29,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 28,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "378:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "369:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 30,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 245,
                          "src": "369:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "356:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "496e73756666696369656e742066756e64207472616e7366657221",
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "397:29:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        },
                        "value": "Insufficient fund transfer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        }
                      ],
                      "id": 24,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "348:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "348:79:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "348:79:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 40,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "457:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 41,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "457:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 42,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "469:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 44,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 43,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "478:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "469:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 45,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 245,
                          "src": "469:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "457:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 35,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 772,
                          "src": "437:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 38,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "437:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 39,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "437:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 47,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "437:59:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48,
                  "nodeType": "ExpressionStatement",
                  "src": "437:59:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "506:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 51,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 50,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "515:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "506:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 52,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "buyer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 249,
                      "src": "506:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "535:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "535:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "506:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "506:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 57,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "555:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 59,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 58,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "564:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "555:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 60,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 247,
                      "src": "555:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 61,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 229,
                        "src": "584:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "HOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "584:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "555:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$229",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 64,
                  "nodeType": "ExpressionStatement",
                  "src": "555:39:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 65,
                          "name": "bicycles",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "604:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                            "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                          }
                        },
                        "id": 67,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 66,
                          "name": "_bicycleId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "613:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "604:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                          "typeString": "struct BicycleRegister.Bicycle storage ref"
                        }
                      },
                      "id": 68,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "boughtAtTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 243,
                      "src": "604:33:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 70,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 774,
                          "src": "647:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "640:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint16_$",
                          "typeString": "type(uint16)"
                        },
                        "typeName": "uint16"
                      },
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "640:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "src": "604:47:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "604:47:0"
                }
              ]
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "buyBicycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "208:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "208:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "207:17:0"
            },
            "returnParameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "242:0:0"
            },
            "scope": 127,
            "src": "188:472:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 125,
              "nodeType": "Block",
              "src": "724:433:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 81,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 772,
                            "src": "766:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 82,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "766:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 83,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "780:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 85,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 84,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "789:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "780:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 86,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "buyer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 249,
                          "src": "780:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "766:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e6f7420627579657221",
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "808:12:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_40a6be1ab6b9315b6d1f069fcd6f3fedb9722309bcc4a987d2699b792777da49",
                          "typeString": "literal_string \"Not buyer!\""
                        },
                        "value": "Not buyer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_40a6be1ab6b9315b6d1f069fcd6f3fedb9722309bcc4a987d2699b792777da49",
                          "typeString": "literal_string \"Not buyer!\""
                        }
                      ],
                      "id": 80,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        775,
                        776
                      ],
                      "referencedDeclaration": 776,
                      "src": "758:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 89,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "758:63:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 90,
                  "nodeType": "ExpressionStatement",
                  "src": "758:63:0"
                },
                {
                  "assignments": [
                    92
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 92,
                      "name": "targetBicycle",
                      "nodeType": "VariableDeclaration",
                      "scope": 125,
                      "src": "939:29:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                        "typeString": "struct BicycleRegister.Bicycle"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 91,
                        "name": "Bicycle",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 250,
                        "src": "939:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 96,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 93,
                      "name": "bicycles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 253,
                      "src": "971:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Bicycle_$250_storage_$dyn_storage",
                        "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                      }
                    },
                    "id": 95,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 94,
                      "name": "_bicycleId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 77,
                      "src": "980:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "971:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Bicycle_$250_storage",
                      "typeString": "struct BicycleRegister.Bicycle storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "939:52:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 97,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1001:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 99,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 247,
                      "src": "1001:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 100,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 229,
                        "src": "1023:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$229_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "SOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1023:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$229",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "1001:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$229",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1001:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 104,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1043:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 106,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "price",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 245,
                      "src": "1043:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1065:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1043:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1043:23:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 110,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1076:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "Owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 237,
                      "src": "1076:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 113,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "1098:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1098:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1076:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 116,
                  "nodeType": "ExpressionStatement",
                  "src": "1076:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 117,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1118:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$250_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 119,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "buyer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 249,
                      "src": "1118:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1148:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1140:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 122,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1140:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1118:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 124,
                  "nodeType": "ExpressionStatement",
                  "src": "1118:32:0"
                }
              ]
            },
            "documentation": null,
            "id": 126,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delivered",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 78,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 126,
                  "src": "690:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 76,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "690:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "689:17:0"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "724:0:0"
            },
            "scope": 127,
            "src": "671:486:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 128,
        "src": "77:1087:0"
      }
    ],
    "src": "0:1164:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0xaa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "Model",
              "type": "string"
            },
            {
              "indexed": false,
              "name": "Color",
              "type": "string"
            }
          ],
          "name": "NewBicycle",
          "type": "event",
          "signature": "0xaa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event",
          "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
        }
      },
      "links": {},
      "address": "0x05F79eAcb99D2AD2d18828c8dCAcCC6Daa56f8c5",
      "transactionHash": "0xbdef05382e7b6842380391175d08cc2d56f5fe7399390fb56f67e8e28eef594d"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-03-17T07:08:22.434Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}